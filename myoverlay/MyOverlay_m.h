//
// Generated file, do not edit! Created by nedtool 5.4 from overlay/myoverlay/MyOverlay.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MYOVERLAY_M_H
#define __MYOVERLAY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "common/NodeHandle.h"
#include "common/OverlayKey.h"
#include "common/CommonMessages_m.h"
#include "common/TransportAddress.h"
// }}

/**
 * Class generated from <tt>overlay/myoverlay/MyOverlay.msg:36</tt> by nedtool.
 * <pre>
 * packet KeyCall extends BaseCallMessage
 * {
 * }
 * </pre>
 */
class KeyCall : public ::BaseCallMessage
{
  protected:

  private:
    void copy(const KeyCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KeyCall&);

  public:
    KeyCall(const char *name=nullptr, short kind=0);
    KeyCall(const KeyCall& other);
    virtual ~KeyCall();
    KeyCall& operator=(const KeyCall& other);
    virtual KeyCall *dup() const override {return new KeyCall(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeyCall& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeyCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/MyOverlay.msg:41</tt> by nedtool.
 * <pre>
 * packet KeyResponse extends BaseResponseMessage
 * {
 *     int activationKey;
 * }
 * </pre>
 */
class KeyResponse : public ::BaseResponseMessage
{
  protected:
    int activationKey;

  private:
    void copy(const KeyResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KeyResponse&);

  public:
    KeyResponse(const char *name=nullptr, short kind=0);
    KeyResponse(const KeyResponse& other);
    virtual ~KeyResponse();
    KeyResponse& operator=(const KeyResponse& other);
    virtual KeyResponse *dup() const override {return new KeyResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getActivationKey() const;
    virtual void setActivationKey(int activationKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeyResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeyResponse& obj) {obj.parsimUnpack(b);}

/**
 * Enum generated from <tt>overlay/myoverlay/MyOverlay.msg:46</tt> by nedtool.
 * <pre>
 * enum MessageType
 * {
 *     SUBSCRIBE = 1;
 * }
 * </pre>
 */
enum MessageType {
    SUBSCRIBE = 1
};

/**
 * Class generated from <tt>overlay/myoverlay/MyOverlay.msg:51</tt> by nedtool.
 * <pre>
 * packet KeySubscriptionMessage extends BaseOverlayMessage
 * {
 *     int messageType \@enum(MessageType);
 *     TransportAddress senderAddress;
 *     int key;
 * }
 * </pre>
 */
class KeySubscriptionMessage : public ::BaseOverlayMessage
{
  protected:
    int messageType;
    TransportAddress senderAddress;
    int key;

  private:
    void copy(const KeySubscriptionMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KeySubscriptionMessage&);

  public:
    KeySubscriptionMessage(const char *name=nullptr, short kind=0);
    KeySubscriptionMessage(const KeySubscriptionMessage& other);
    virtual ~KeySubscriptionMessage();
    KeySubscriptionMessage& operator=(const KeySubscriptionMessage& other);
    virtual KeySubscriptionMessage *dup() const override {return new KeySubscriptionMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);
    virtual TransportAddress& getSenderAddress();
    virtual const TransportAddress& getSenderAddress() const {return const_cast<KeySubscriptionMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const TransportAddress& senderAddress);
    virtual int getKey() const;
    virtual void setKey(int key);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeySubscriptionMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeySubscriptionMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/MyOverlay.msg:58</tt> by nedtool.
 * <pre>
 * packet TheLatestMessage extends BaseOverlayMessage
 * {
 *     int latestIndex;
 *     string theLatest;
 * }
 * </pre>
 */
class TheLatestMessage : public ::BaseOverlayMessage
{
  protected:
    int latestIndex;
    ::omnetpp::opp_string theLatest;

  private:
    void copy(const TheLatestMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TheLatestMessage&);

  public:
    TheLatestMessage(const char *name=nullptr, short kind=0);
    TheLatestMessage(const TheLatestMessage& other);
    virtual ~TheLatestMessage();
    TheLatestMessage& operator=(const TheLatestMessage& other);
    virtual TheLatestMessage *dup() const override {return new TheLatestMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getLatestIndex() const;
    virtual void setLatestIndex(int latestIndex);
    virtual const char * getTheLatest() const;
    virtual void setTheLatest(const char * theLatest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TheLatestMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TheLatestMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYOVERLAY_M_H

