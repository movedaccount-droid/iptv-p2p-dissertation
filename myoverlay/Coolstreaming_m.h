//
// Generated file, do not edit! Created by nedtool 5.4 from overlay/myoverlay/Coolstreaming.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __COOLSTREAMING_M_H
#define __COOLSTREAMING_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <chrono>
#include "common/NodeHandle.h"
#include "common/OverlayKey.h"
#include "common/CommonMessages_m.h"
#include "common/TransportAddress.h"
typedef std::chrono::duration<int,std::milli> duration_ms;
// }}

/**
 * Class generated from <tt>overlay/myoverlay/Coolstreaming.msg:39</tt> by nedtool.
 * <pre>
 * // scamp/mcache membership message
 * packet Membership extends BaseOverlayMessage
 * {
 *     int uuid; // to identify infinitely looping messages
 *     int seq_num;
 *     TransportAddress tad;
 *     int num_partner;
 *     simtime_t ttl;
 *     bool forwarded; // if this was forwarded or is the entry message for the node
 *     bool entry; // if this is the entry message for the node
 * }
 * </pre>
 */
class Membership : public ::BaseOverlayMessage
{
  protected:
    int uuid;
    int seq_num;
    TransportAddress tad;
    int num_partner;
    ::omnetpp::simtime_t ttl;
    bool forwarded;
    bool entry;

  private:
    void copy(const Membership& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Membership&);

  public:
    Membership(const char *name=nullptr, short kind=0);
    Membership(const Membership& other);
    virtual ~Membership();
    Membership& operator=(const Membership& other);
    virtual Membership *dup() const override {return new Membership(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getUuid() const;
    virtual void setUuid(int uuid);
    virtual int getSeq_num() const;
    virtual void setSeq_num(int seq_num);
    virtual TransportAddress& getTad();
    virtual const TransportAddress& getTad() const {return const_cast<Membership*>(this)->getTad();}
    virtual void setTad(const TransportAddress& tad);
    virtual int getNum_partner() const;
    virtual void setNum_partner(int num_partner);
    virtual ::omnetpp::simtime_t getTtl() const;
    virtual void setTtl(::omnetpp::simtime_t ttl);
    virtual bool getForwarded() const;
    virtual void setForwarded(bool forwarded);
    virtual bool getEntry() const;
    virtual void setEntry(bool entry);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Membership& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Membership& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/Coolstreaming.msg:50</tt> by nedtool.
 * <pre>
 * // scamp/inview membership message
 * packet InviewCall extends BaseCallMessage
 * {
 *     TransportAddress destination;
 *     TransportAddress accepting_node;
 * }
 * </pre>
 */
class InviewCall : public ::BaseCallMessage
{
  protected:
    TransportAddress destination;
    TransportAddress accepting_node;

  private:
    void copy(const InviewCall& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InviewCall&);

  public:
    InviewCall(const char *name=nullptr, short kind=0);
    InviewCall(const InviewCall& other);
    virtual ~InviewCall();
    InviewCall& operator=(const InviewCall& other);
    virtual InviewCall *dup() const override {return new InviewCall(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual TransportAddress& getDestination();
    virtual const TransportAddress& getDestination() const {return const_cast<InviewCall*>(this)->getDestination();}
    virtual void setDestination(const TransportAddress& destination);
    virtual TransportAddress& getAccepting_node();
    virtual const TransportAddress& getAccepting_node() const {return const_cast<InviewCall*>(this)->getAccepting_node();}
    virtual void setAccepting_node(const TransportAddress& accepting_node);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InviewCall& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InviewCall& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/Coolstreaming.msg:56</tt> by nedtool.
 * <pre>
 * // scamp/inview insertion acknowledgement
 * packet InviewResponse extends BaseResponseMessage
 * {
 * }
 * </pre>
 */
class InviewResponse : public ::BaseResponseMessage
{
  protected:

  private:
    void copy(const InviewResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InviewResponse&);

  public:
    InviewResponse(const char *name=nullptr, short kind=0);
    InviewResponse(const InviewResponse& other);
    virtual ~InviewResponse();
    InviewResponse& operator=(const InviewResponse& other);
    virtual InviewResponse *dup() const override {return new InviewResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InviewResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InviewResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/Coolstreaming.msg:59</tt> by nedtool.
 * <pre>
 * // scamp/mcache unsubscription message
 * packet Unsubscription extends BaseOverlayMessage
 * {
 *     TransportAddress leaving;
 *     TransportAddress replacement;
 *     bool inview;
 * }
 * </pre>
 */
class Unsubscription : public ::BaseOverlayMessage
{
  protected:
    TransportAddress leaving;
    TransportAddress replacement;
    bool inview;

  private:
    void copy(const Unsubscription& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Unsubscription&);

  public:
    Unsubscription(const char *name=nullptr, short kind=0);
    Unsubscription(const Unsubscription& other);
    virtual ~Unsubscription();
    Unsubscription& operator=(const Unsubscription& other);
    virtual Unsubscription *dup() const override {return new Unsubscription(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual TransportAddress& getLeaving();
    virtual const TransportAddress& getLeaving() const {return const_cast<Unsubscription*>(this)->getLeaving();}
    virtual void setLeaving(const TransportAddress& leaving);
    virtual TransportAddress& getReplacement();
    virtual const TransportAddress& getReplacement() const {return const_cast<Unsubscription*>(this)->getReplacement();}
    virtual void setReplacement(const TransportAddress& replacement);
    virtual bool getInview() const;
    virtual void setInview(bool inview);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Unsubscription& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Unsubscription& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/myoverlay/Coolstreaming.msg:66</tt> by nedtool.
 * <pre>
 * // scamp/mcache heartbeat message
 * packet Heartbeat extends BaseOverlayMessage
 * {
 * }
 * </pre>
 */
class Heartbeat : public ::BaseOverlayMessage
{
  protected:

  private:
    void copy(const Heartbeat& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Heartbeat&);

  public:
    Heartbeat(const char *name=nullptr, short kind=0);
    Heartbeat(const Heartbeat& other);
    virtual ~Heartbeat();
    Heartbeat& operator=(const Heartbeat& other);
    virtual Heartbeat *dup() const override {return new Heartbeat(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Heartbeat& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Heartbeat& obj) {obj.parsimUnpack(b);}


#endif // ifndef __COOLSTREAMING_M_H

